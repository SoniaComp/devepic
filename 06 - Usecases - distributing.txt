* User
    => 가입
        User-가입-01
            로그인하지 않은 소비자:
                1) 소비자가 FoodShopper 앱에 접속한다.
                2) "로그인 화면"* 이 보인다.
                3) 소비자가 "회원가입 이동 버튼"* 을 클릭한다. 
                4) "회원가입 화면"* 이 보인다.
                5) 소비자가 "회원가입 폼"* 을 입력한다.
                    5-1) 검증 오류: User-가입-01-E01
                6) "회원가입 버튼"* 을 클릭한다. | User-가입-01-S01
                    6-1) 아이디 중복 오류: User-가입-01-E02
                7) "성공메시지"* 가 보인다.
                8) "로그인 화면"* 이 보인다.

            * 로그인 화면
            * 회원가입 이동 버튼
            * 회원가입 화면
            * 회원가입 버튼
            * 회원가입 폼
            * 성공메시지

        User-가입-01-E01:
            E01-1) 입력 폼 하단에 "가입 검증 오류 메시지"* 가 보인다.
            E01-2) User-가입-01 5 로 돌아간다.

            * 가입 검증 오류 메시지

        User-가입-01-E02:
            E02-1) "아이디 중복 메시지"* 가 보인다.
            E02-2) User-가입-01 4 로 돌아간다.

            * 아이디 중복 메시지

        User-가입-01-S01:
            S01-1) "회원가입 폼 데이터"* 를 수신한다. (HTTP:POST)
            S01-2) 데이터를 검증한다.
                S01-2-1) 데이터 검증 오류: User-가입-01-S01-E01
            S01-3) 소비자를 생성한다.
            S01-4) HTTP:201, "생성된 소비자 데이터"* 를 반환한다.
            
            * 회원가입 폼 데이터
            * 생성된 소비자 데이터
    
        User-가입-01-S01-E01:
            S01-E01-1) HTTP:400, "회원 가입 검증 오류 메시지"*를 반환한다.

            * 회원 가입 검증 오류 메시지

    => 로그인
        User-로그인-01
            로그인하지 않은 사용자:
                1) 사용자가 FoodShopper 앱에 접속한다.
                2) "로그인 화면"* 이 보인다.
                3) 사용자가 "로그인 입력 폼"* 을 입력한다.
                4) "로그인 버튼"을 클릭한다. | User-로그인-01-S01
                    4-1) 아이디 혹은 비밀번호 오류: User-로그인-01-E01
                5) "로그인 성공 메세지"* 가 보인다.
                6) "공급자 목록 화면"* 이 보인다.

            * 로그인 화면
            * 로그인 입력 폼
            * 로그인 버튼
            * 로그인 성공 메세지
            * 공급자 목록 화면

        User-로그인-01-E01:
            E01-1) "로그인 실패 메시지"* 가 보인다.
            E01-2) "로그인 입력 폼"* 이 초기화 된다.
            E01-3) User-로그인-01 2 로 돌아간다.
            
            * 로그인 실패 메시지
            * 로그인 입력 폼

        User-로그인-01-S01:
            S01-1) "로그인 입력 폼 데이터"* 를 수신한다. (HTTP:POST)
            S01-2) 데이터를 검증한다.
            S01-3) HTTP 200, "사용자 데이터"* 를 반환한다.

            * 로그인 폼 데이터
            * 사용자 데이터 
            
            
    => 탈퇴
        User-탈퇴-01
            로그인한 소비자:
                1) 소비자가 "마이페이지 화면"*에서 "탈퇴이동 버튼"*을 클릭한다.
                2) "탈퇴하기 화면"* 이 보인다.
                3) 소비자가 탈퇴 사유를 입력한다. 
                4) "탈퇴하기 버튼"*을 클릭한다. | User-탈퇴-01-S01
                5) "탈퇴 확인 메세지"* 가 보인다.
                6) 소비자가 "탈퇴 확인 버튼"* 을 클릭한다. 
                7) 탈퇴 시각을 기록하고 탈퇴 처리를 진행한다.
                8) "로그인 화면"* 이 보인다.
                
            * 마이페이지 화면
            * 탈퇴이동 버튼
            * 탈퇴하기 버튼
            * 탈퇴하기 화면
            * 탈퇴 확인 메세지
            * 탈퇴 확인 버튼
            * 로그인 화면

        User-탈퇴-01-S01:
            S01-1) 소비자 PK 와 HTTP:DELETE 를 수신한다.
            S01-2) 매칭되는 소비자의 Consumer::소비자 탈퇴 시각을 현재 서버 시간으로 기록한다.
            S01-3) HTTP 204 를 반환한다.
            

    => 비밀번호 찾기
        User-비밀번호찾기-01
            로그인하지 않은 사용자:
                1) 사용자가 FoodShopper 앱에 접속한다.
                2) "로그인 화면"*이 보인다.
                3) 사용자가 "비밀번호 찾기 이동 버튼"*을 클릭한다.
                4) "비밀번호 찾기 화면"* 이 보인다. 
                5) 사용자가 "비밀번호 찾기 폼"* 을 입력한다. 
                6) 사용자가 "비밀번호 찾기 버튼"*을 클릭한다. | User-비밀번호찾기-01-S01
                7) 수정된 비밀번호를 기존 등록된 이메일을 통해 수신한다.
                
            * 로그인 화면
            * 비밀번호 찾기 이동 버튼
            * 비밀번호 찾기 버튼
            * 비밀번호 찾기 화면
            * 비밀번호 찾기 폼
            
        User-비밀번호찾기-01-S01:
            S01-1) "비밀번호 찾기 폼 데이터"* 를 수신한다. (HTTP:POST)
            S01-2) "사용자 임시 비밀번호"* 를 생성한다.
            S01-3) 사용자의 비밀번호를 "사용자 임시 비밀번호"* 로 갱신한다.
            S01-4) "비밀번호 찾기 폼 데이터"* 에 포함된 이메일로 "사용자 임시 비밀번호"를 전송한다.
            S01-5) HTTP:200 을 반환한다.
        
            * 비밀번호 찾기 폼 데이터
            * 사용자 임시 비밀번호

    => 비밀번호 수정
        User-비밀번호수정-01
            로그인한 사용자:
                1) "사용자 마이페이지 화면"* 이 보인다. 
                2) 사용자가 "비밀번호 수정 화면 이동 버튼"* 을 클릭한다.
                3) "비밀번호 수정 화면"* 이 보인다.
                4) "비밀번호 검증 폼"* 에서 "비밀번호 검증 버튼"* 을 클릭한다. | User-비밀번호수정-01-S01
                5) "비밀번호 수정 폼"* 에 새로운 비밀번호를 입력한다.
                6) "비밀번호 변경 버튼"*을 클릭한다. | User-비밀번호수정-01-S02
                7) "사용자 마이페이지 화면"* 이 보인다. 
                
            * 사용자 마이페이지 화면
            * 비밀번호 수정 화면 이동 버튼
            * 비밀번호 수정 화면
            * 비밀번호 검증 폼
            * 비밀번호 검증 버튼
            * 비밀번호 수정 폼
            * 비밀번호 변경 버튼
            
        User-비밀번호수정-01-S01:
            S01-1) "비밀번호 검증 폼 데이터"* 를 수신한다. (HTTP:POST)
            S01-2) HTTP:200 을 반환한다.

            * 비밀번호 검증 폼 데이터            
                        
        User-비밀번호수정-01-S02:
            S01-1) "비밀번호 수정 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S01-2) "비밀번호 수정 폼 데이터"* 에 포함된 새로운 비밀번호로 사용자의 비밀번호를 갱신한다.
            S01-3) HTTP:200을 반환한다.

            * 비밀번호 검증 폼 데이터

* Location
    경도, 위도, 주소
    
    => 공급자 조회
        Location-공급자 조회-01
            로그인한 소비자:
                1) "공급자 목록 화면"* 이 보인다. | Location-공급자 조회-01-S01
                2) 현재 소비자의 위치로 "배달이 가능한 공급자의 목록"*이 등록된 순으로 나온다.

            * 공급자 목록 화면
            * 배달이 가능한 공급자의 목록

        Location-공급자 조회-01-S01:
            S01-1) 소비자의 현재 Location::주소를 수신한다. (HTTP:GET)
            S01-2) HTTP:200, 소비자의 현재 Location::주소로 "배달이 가능한 공급자의 목록"*을 반환한다.
            
            * 배달이 가능한 공급자의 목록

* Consumer
    => 프로필 수정
        Consumer-프로필 수정-01
            로그인한 소비자:
                1) "소비자 마이페이지 화면"* 에서 소비자가 "소비자 프로필 수정 이동 버튼"* 을 클릭한다.
                2) "소비자 프로필 수정 화면"* 이 보인다.
                3) 소비자가 "소비자 프로필 수정 폼"* 에 맞춰 정보를 입력한다.
                4) 소비자가 "소비자 프로필 수정 버튼"*을 클릭한다. | Consumer-프로필 수정-01-S01
                5) 변경된 프로필이 반영된 "소비자 마이페이지 화면"* 이 보인다.
                
            * 소비자 마이페이지 화면
            * 소비자 프로필 수정 이동 버튼
            * 소비자 프로필 수정 화면
            * 소비자 프로필 수정 폼
            * 소비자 프로필 수정 버튼
        
        Consumer-프로필 수정-01-S01:  
            S01-1) 소비자 PK, "소비자 프로필 수정 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S01-2) 소비자의 프로필을 갱신한다.
            S01-3) HTTP 200, "소비자 프로필 데이터"* 를 반환한다.

            * 소비자 프로필 수정 폼 데이터
            * 소비자 프로필 데이터

    => Order::주문 조회
        Consumer-주문 조회-01
            로그인한 소비자:
                1) 소비자가 "주문 조회 화면 이동 버튼"* 을 클릭한다. | Consumer-주문 조회-01-S01
                2) "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.
                
            * 주문 조회 화면 이동 버튼
            * 주문 조회 화면
            * 주문 목록
            
        Consumer-주문 조회-01-S01:
            S01-1) 주문 조회 요청을 수신한다. (HTTP:GET)
            S01-2) HTTP 200, "주문 목록 데이터"* 를 최신순으로 정렬 후 반환한다.

            * 주문 목록 데이터

    => Order::주문 생성
        Consumer-주문 생성-01
            로그인한 소비자:
                1) "공급자 목록 화면"* 에서 소비자가 "공급자 상세 화면 이동 버튼"*을 클릭한다. | Consumer-주문 생성-01-S01, Consumer-주문 생성-01-S02
                2) "공급자 상세 화면"* 의 "메뉴 목록"* 에서 소비자가 "메뉴 장바구니 추가 버튼"* 을 클릭한다.
                3) "메뉴 장바구니 화면"* 에서 소비자가 소비자가 "주문 폼"* 에 맞춰 정보를 입력한다.
                4) 소비자가 "장바구니에 추가 버튼"* 을 클릭한다.
                5) "공급자 상세 화면"* 에서 소비자가 "장바구니 화면 이동 버튼"* 을 클릭한다.
                6) "장바구니 화면"* 에서 소비자가 "주문하기 버튼"* 을 클릭한다. | Consumer-주문 생성-01-S03
                7) "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.

            * 공급자 목록 화면
            * 공급자 상세 화면 이동 버튼
            * 메뉴 목록
            * 메뉴 장바구니 추가 버튼
            * 메뉴 장바구니 화면
            * 주문 폼
            * 장바구니에 추가 버튼
            * 장바구니 화면 이동 버튼
            * 장바구니 화면
            * 주문하기 버튼
            * 주문 조회 화면
            * 주문 목록

        Consumer-주문 생성-01-S01:
            S01-1) 공급자 목록 조회 요청을 수신한다. (HTTP:GET)
            S01-2) HTTP:200, "공급자 목록 데이터"* 를 등록순으로 반환한다.
            
            * 공급자 목록 데이터

        Consumer-주문 생성-01-S02:
            S02-1) 공급자 PK, 공급자 상세 요청을 수신한다. (HTTP:GET)
            S02-2) HTTP:200, 공급자 데이터를 반환한다.
            
        Consumer-주문 생성-01-S03:
            S03-1) "주문 폼 데이터"* 를 수신한다. (HTTP:POST)
            S03-2) 주문을 생성한다.
            S03-3) HTTP:201, "주문 데이터"* 를 반환한다.

            * 주문 폼 데이터
            * 주문 데이터

    => Order::리뷰 생성
        Consumer-리뷰 생성-01
            로그인한 소비자:
                1) 소비자가 "주문 조회 화면 이동 버튼"* 을 클릭한다.
                2) "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다. 
                3) 소비자가 "리뷰 작성 이동 버튼"* 을 클릭한다.
                4) "리뷰 작성 화면"* 이 보인다. 
                5) "리뷰 작성 폼"에 맞춰 리뷰를 작성한다. 
                6) 소비자가 "리뷰 작성 버튼"* 을 클릭한다. | Consumer-리뷰 생성-01-S01
                7) "주문 조회화면"* 이 보인다.

                * 주문 조회 화면 이동 버튼
                * 주문 조회 화면
                * 주문 목록
                * 리뷰 작성 이동 버튼
                * 리뷰 작성 화면
                * 리뷰 작성 폼
                * 리뷰 작성 버튼

        Consumer-리뷰 생성-01-S01:
            S03-1) "리뷰 작성 폼 데이터"* 를 수신한다. (HTTP:POST)
            S03-2) 리뷰를 생성한다.
            S03-3) HTTP:201, "리뷰 데이터"* 를 반환한다.

            * 리뷰 작성 폼 데이터
            * 리뷰 데이터

    => Order::리뷰 수정
        Consumer-주문 조회-01
            로그인한 소비자:
                1) 소비자가 "주문 조회 화면 이동 버튼"* 을 클릭한다.
                2) "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.
                3) 소비자가 "리뷰 수정 이동 버튼"* 을 클릭한다.
                4) "리뷰 수정 화면"* 이 보인다.
                5) 소비자가 "리뷰 수정 폼"* 을 입력한다.
                6) "리뷰 수정 버튼"*을 클릭한다. | Consumer-주문 조회-01-S01
                7) 리뷰 수정이 반영된 "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.
                
                * 주문 조회 화면 이동 버튼
                * 주문 조회 화면
                * 주문 목록
                * 리뷰 수정 이동 버튼
                * 리뷰 수정 화면
                * 리뷰 수정 폼
                * 리뷰 수정 버튼

        Consumer-주문 조회-01-S01:
            S01-1) 리뷰 PK, "리뷰 수정 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S01-2) 리뷰를 갱신한다.
            S01-3) HTTP:200, 수정된 "리뷰 데이터"* 를 반환한다.
            
            * 리뷰 수정 폼 데이터
            * 리뷰 데이터

    => Order::리뷰 삭제
        Consumer-리뷰 삭제-01
            로그인한 소비자:
                1) 소비자가 "주문 조회 화면 이동 버튼"* 을 클릭한다.
                2) "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.
                3) 소비자가 "리뷰 수정 이동 버튼"* 을 클릭한다.
                4) "리뷰 수정 화면"* 이 보인다.
                5) 소비자가 "리뷰 삭제 버튼"*을 클릭한다. | Consumer-리뷰 삭제-01-S01
                6) 리뷰 삭제가 반영된 "주문 조회 화면"* 에서 "주문 목록"* 이 최신순으로 보인다.
                
                * 주문 조회 화면 이동 버튼
                * 주문 조회 화면
                * 주문 목록
                * 리뷰 수정 이동 버튼
                * 리뷰 수정 화면
                * 리뷰 수정 폼
                * 리뷰 삭제 버튼
            
        Consumer-리뷰 삭제-01-S01:
            S01-1) 리뷰 PK 를 수신한다. (HTTP:DELETE)
            S01-2) 매칭되는 리뷰의 Order::리뷰 삭제 시각을 현재 서버 시간으로 기록한다.
            S01-3) HTTP:204 를 반환한다.

* Provider    
    => 프로필 수정
        Provider-프로필 수정-01
            로그인한 공급자:
                1) 공급자가 "공급자 마이페이지 화면"* 에서 "프로필 수정 이동 버튼"* 을 클릭한다. | Provider-프로필 수정-01-S01
                2) "공급자 프로필 수정 화면"* 이 보인다.
                3) 공급자가 "공급자 프로필 수정 폼"* 에 맞춰 정보를 입력한다.
                4) "공급자 프로필 수정 버튼"*을 클릭한다. | Provider-프로필 수정-01-S02
                5) 변경된 프로필이 반영된 "공급자 마이페이지 화면"* 이 보인다.
                
            * 공급자 마이페이지 화면
            * 프로필 수정 이동 버튼
            * 공급자 프로필 수정 화면
            * 공급자 프로필 수정 폼
            * 프로필 수정 버튼

        Provider-프로필 수정-01-S01:
            S01-1) "공급자 데이터"* 를 요청한다. (HTTP:GET)
            S01-2) HTTP:200, "공급자 데이터"* 를 반환한다.
            
            * 공급자 데이터
            
        Provider-프로필 수정-01-S02:
            S02-1) 공급자 PK, "공급자 프로필 수정 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S02-2) 공급자 프로필을 갱신한다.
            S02-3) HTTP:200, 수정된 "공급자 프로필 데이터"* 를 반환한다.
            
            * 리뷰 수정 폼 데이터
            * 리뷰 데이터

    => 메뉴 생성
        Provider-메뉴 생성-01:
            로그인한 공급자:
                1) 공급자가 "공급자 마이페이지 화면"* 에서 "메뉴 생성 화면 이동 버튼"* 을 클릭한다.
                2) "메뉴 생성 화면"*이 보인다.
                3) 공급자가 "메뉴 생성 폼"*에 맞춰 정보를 입력한다.
                4) "메뉴 생성 버튼"* 을 클릭한다. | Provider-메뉴 생성-01-S01
                5) 생성된 메뉴가 반영된 "공급자 마이페이지 화면"*이 보인다.

                * 공급자 마이페이지 화면
                * 메뉴 생성 화면 이동 버튼
                * 메뉴 생성 화면
                * 메뉴 생성 폼
                * 메뉴 생성 버튼

        Provider-메뉴 생성-01-S01:
                S01-1) "메뉴 생성 폼 데이터"* 를 수신한다. (HTTP:POST)
                S01-2) 메뉴를 생성한다.
                S01-3) HTTP:201, 생성된 "메뉴 데이터"* 를 반환한다.

                * 메뉴 생성 폼 데이터
                * 메뉴 데이터

    => 메뉴 수정
        Provider-메뉴 수정-01:
            로그인한 공급자:
                1) 공급자가 "공급자 마이페이지 화면"* 중 "메뉴 목록"* 에서 수정할 메뉴를 클릭한다. | Provider-메뉴 수정-01-S01
                2) "메뉴 수정 화면"*이 보인다.
                3) 공급자가 "메뉴 수정 폼"*에 맞춰 정보를 입력하고 "메뉴 수정 버튼"* 을 클릭한다. | Provider-메뉴 수정-01-S02
                4) 수정된 메뉴가 반영된 "공급자 마이페이지 화면"*이 보인다.

                * 공급자 마이페이지 화면
                * 메뉴 목록
                * 메뉴 수정 화면
                * 메뉴 수정 폼
                
        Provider-메뉴 수정-01-S01:
            S01-1) "메뉴 데이터"* 를 요청한다. (HTTP:GET)
            S01-2) HTTP:200, 수정된 "메뉴 데이터"* 를 반환한다.
            
            * 메뉴 데이터

        Provider-메뉴 수정-01-S02:
            S02-1) 메뉴 pk, "메뉴 수정 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S02-2) 메뉴를 갱신한다.
            S02-3) HTTP:200, 수정된 "메뉴 데이터"* 를 반환한다.

    => Order::주문 조회
        Provider-주문 조회-01:
            로그인한 공급자:
                1) 공급자가 "주문 조회 화면 이동 버튼"* 을 클릭한다. | Provider-주문 조회-01-S01
                2) "주문 조회 화면"* 중 "주문 목록"* 이 최신순으로 보인다.

                * 주문 조회 화면 이동 버튼
                * 주문 조회 화면
                * 주문 목록

        Provider-주문 조회-01-S01:
            S01-1) 주문 조회 요청을 수신한다. (HTTP:GET)
            S01-2) HTTP:200, "주문 내역 목록 데이터"* 을 반환한다.
        
            * 주문 내역 목록 데이터

    => Order::주문 수정
        Provider-주문 수정-01:
            로그인한 공급자:
                1) 공급자가 "주문 조회 화면 이동 버튼"* 을 클릭한다.
                2) "주문 조회 화면"* 중 "주문 목록"* 이 최신순으로 보인다.
                3) "주문 내역 상태 수정 버튼"* 을 클릭한다. | Provider-주문 수정-01-S01
                4) 수정이 반영된 "주문 조회 화면"* 중 "주문 목록"* 이 최신순으로 보인다.
                
                * 주문 조회 화면 이동 버튼
                * 주문 조회 화면
                * 주문 내역 상태 수정 버튼
                * 주문 조회 화면
                * 주문 목록

        Provider-주문 수정-01-S01:
            S01-1) 주문 PK, "주문 상태"* 를 수신한다. (HTTP:PUT)
            S01-2) 주문 수정 시각을 현재 서버 시간으로 기록한다.
            S01-2) HTTP 200, "주문 데이터"* 를 반환한다.
            
            * 주문 상태
            * 주문 데이터
    
    => Order::주문 통계
        Provider-주문 통계-01:
            로그인한 공급자:
                1) 공급자가 "공급자 마이페이지"* 에서 "주문 통계 화면 이동 버튼"* 을 클릭한다.
                2) "주문 통계 화면"* 이 보인다.
                3) 공급자가 "주문 통계 화면"* 에서 "주문 통계 조회 기간 설정 폼"* 에 조회하기 원하는 기간을 설정한다.
                4) "주문 통계 보기 버튼-기간"* 을 클릭한다. | Provider-주문 통계-01-S01
                5) "주문 통계 결과 화면"* 이 보인다.

                * 공급자 마이페이지
                * 주문 통계 화면
                * 주문 통계 조회 기간 설정 폼
                * 주문 통계 보기 버튼
                * 주문 통계 결과 화면
                
            Provider-주문 통계-01-S01:
                S01-1) "주문 통계 요청 데이터"* 를 수신한다 (HTTP:GET)
                S01-2) HTTP:200, "주문 통계 데이터"* 를 반환한다.
                
                * 주문 통계 요청 데이터
                * 주문 통계 데이터
        
    => Order::리뷰 조회
        Provider-리뷰 조회-01:
            로그인한 공급자:
                1) 공급자가 "리뷰 화면 이동 버튼"* 을 클릭한다. | Provider-리뷰 조회-01-S01
                2) "리뷰 화면"* 중 "리뷰 목록"* 이 최신순으로 보인다.
                3) "리뷰 보기 버튼"* 을 클릭한다.
                4) "리뷰 상세 화면"* 이 보인다.

                * 리뷰 화면 이동 버튼
                * 리뷰 화면
                * 리뷰 목록
                * 리뷰 보기 버튼
                * 리뷰 상세 화면
            
        Provider-리뷰 조회-01-S01:
            S01-1) 주문 PK 를 수신한다. (HTTP:GET)
            S01-2) HTTP 200, "주문 데이터"* 를 반환한다.

            * 주문 데이터 

    => Order::리뷰 답글 생성
        Provider-리뷰 답글 생성-01:
            로그인한 공급자:
                1) 공급자가 "리뷰 화면 이동 버튼"* 을 클릭한다.
                2) "리뷰 화면"* 중 "리뷰 목록"* 이 최신순으로 보인다.
                3) "리뷰 보기 버튼"* 을 클릭한다.
                4) "리뷰 상세 화면"* 이 보인다.
                5) "리뷰 답글 달기 이동 버튼"* 을 클릭한다.
                6) "리뷰 답글 달기 화면"* 이 보인다.
                7) "리뷰 답글 폼"* 을 입력하고 "리뷰 답글 달기 버튼"* 을 클릭한다. | Provider-리뷰 답글 생성-01-S01
                8) "리뷰가 생성된 주문 목록"* 이 최신 순으로 보인다.

                * 리뷰 화면 이동 버튼
                * 리뷰 화면
                * 리뷰 목록
                * 리뷰 보기 버튼
                * 리뷰 상세 화면
                * 리뷰 답글 달기 이동 버튼
                * 리뷰 답글 달기 화면
                * 리뷰 답글 폼
                * 리뷰 답글 달기 버튼

        Provider-리뷰 답글 생성-01-S01:
            S01-1) 주문 PK, "리뷰 답글 폼 데이터"* 를 수신한다. (HTTP:PUT)
            S01-2) "주문 데이터"* 를 갱신한다
            S01-3) HTTP 200, "주문 데이터"* 를 반환한다.

            * 리뷰 답글 폼 데이터
            * 주문 데이터

    => Order::리뷰 답글 수정
        Provider-리뷰 답글 수정-01:
            로그인한 공급자:
                1) 공급자가 "리뷰 화면 이동 버튼"* 을 클릭한다.
                2) "리뷰 화면"* 중 "리뷰 목록"* 이 최신순으로 보인다.
                3) "리뷰 보기 버튼"* 을 클릭한다.
                4) "리뷰 상세 화면"* 이 보인다.
                5) "리뷰 답글 수정"* 버튼을 클릭한다.
                6) "리뷰 답글 달기 화면"* 이 보인다.
                7) 기존 리뷰 내용이 있는 "리뷰 답글 폼"* 에서 리뷰를 수정한다.
                8) "리뷰 답글 달기 버튼"* 을 클릭한다.
                9) "리뷰가 생성된 주문 목록"* 이 최신 순으로 보인다.
            
                * 리뷰 화면 이동 버튼
                * 리뷰 화면
                * 리뷰 목록
                * 리뷰 보기 버튼
                * 리뷰 상세 화면
                * 리뷰 답글 수정
                * 리뷰 답글 달기 화면
                * 리뷰 답글 폼
                * 리뷰 답글 달기 버튼
                * 리뷰가 생성된 주문 목록